apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
    app.kubernetes.io/name: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  # Include any additional annotations
  {{- with .Values.statefulSet.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
    # Allows us to automatically update the stateful set if the config map or
    # secret have changed by using a checksum of their manifests. This prevents 
    # an issue where if the deployment spec itself didn't change the application 
    # keeps running with the old configuration resulting in an inconsistent deployment.
    checksum/config: {{ include (print $.Template.BasePath "/ConfigMap.yaml") . | sha1sum }}
    checksum/secret: {{ include (print $.Template.BasePath "/Secret.yaml") . | sha1sum }}
spec:
  serviceName: {{ .Release.Name }}
  replicas: {{ .Values.statefulSet.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.statefulSet.terminationGracePeriodSeconds }}
      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.statefulSet.image.repository }}:{{ .Values.statefulSet.image.tag }}
        imagePullPolicy: {{ .Values.statefulSet.image.pullPolicy }}
        command: ["/bin/node", "start"]
        livenessProbe:
          httpGet:
            port: {{ .Values.statefulSet.livenessProbe.port }}
            path: /status 
            scheme: HTTP 
          initialDelaySeconds: {{ .Values.statefulSet.livenessProbe.initialDelaySeconds }} 
          periodSeconds: {{ .Values.statefulSet.livenessProbe.periodSeconds }} 
          successThreshold: {{ .Values.statefulSet.livenessProbe.successThreshold }} 
          failureThreshold: {{ .Values.statefulSet.livenessProbe.failureThreshold }}  
          timeoutSeconds: {{ .Values.statefulSet.livenessProbe.timeoutSeconds }}   

        readinessProbe:
          httpGet:
            port: {{ .Values.statefulSet.readinessProbe.port }}
            path: /status 
            scheme: HTTP 
          initialDelaySeconds: {{ .Values.statefulSet.readinessProbe.initialDelaySeconds }} 
          periodSeconds: {{ .Values.statefulSet.readinessProbe.periodSeconds }} 
          successThreshold: {{ .Values.statefulSet.readinessProbe.successThreshold }} 
          failureThreshold: {{ .Values.statefulSet.readinessProbe.failureThreshold }}  
          timeoutSeconds: {{ .Values.statefulSet.readinessProbe.timeoutSeconds }}   
        env:
        - name: "GOSSIP_HOSTS"
          valueFrom:
            configMapKeyRef:
              key: "GOSSIP_HOSTS"
              name: {{ .Release.Name }}
        - name: "GOSSIP_SECRET_KEY"
          valueFrom:
            secretKeyRef:
              key: "GOSSIP_SECRET_KEY"
              name: {{ .Release.Name }}
        - name: "GOSSIP_PORT"
          valueFrom:
            configMapKeyRef:
              key: "GOSSIP_PORT"
              name: {{ .Release.Name }}
        - name: "HTTP_SERVER_PORT"
          valueFrom:
            configMapKeyRef:
              key: "HTTP_SERVER_PORT"
              name: {{ .Release.Name }}
        - name: "HTTP_SERVER_ENABLE_CORS"
          valueFrom:
            configMapKeyRef:
              key: "HTTP_SERVER_ENABLE_CORS"
              name: {{ .Release.Name }}
        - name: "HTTP_CLIENT_TIMEOUT"
          valueFrom:
            configMapKeyRef:
              key: "HTTP_CLIENT_TIMEOUT"
              name: {{ .Release.Name }}